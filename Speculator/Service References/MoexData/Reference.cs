//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Speculator.MoexData {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MoexData.IMoexData")]
    public interface IMoexData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMoexData/AddSystem", ReplyAction="http://tempuri.org/IMoexData/AddSystemResponse")]
        SpeculatorModel.MoexHistory.MoexSystem AddSystem(SpeculatorModel.MoexHistory.MoexSystem system);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoexData/AddSystem", ReplyAction="http://tempuri.org/IMoexData/AddSystemResponse")]
        System.IAsyncResult BeginAddSystem(SpeculatorModel.MoexHistory.MoexSystem system, System.AsyncCallback callback, object asyncState);
        
        SpeculatorModel.MoexHistory.MoexSystem EndAddSystem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMoexData/AddSymbol", ReplyAction="http://tempuri.org/IMoexData/AddSymbolResponse")]
        SpeculatorModel.MoexHistory.MoexSymbol AddSymbol(SpeculatorModel.MoexHistory.MoexSymbol symbol);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoexData/AddSymbol", ReplyAction="http://tempuri.org/IMoexData/AddSymbolResponse")]
        System.IAsyncResult BeginAddSymbol(SpeculatorModel.MoexHistory.MoexSymbol symbol, System.AsyncCallback callback, object asyncState);
        
        SpeculatorModel.MoexHistory.MoexSymbol EndAddSymbol(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMoexData/AddClaims", ReplyAction="http://tempuri.org/IMoexData/AddClaimsResponse")]
        void AddClaims(SpeculatorModel.MoexHistory.MoexClaim[] claims);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoexData/AddClaims", ReplyAction="http://tempuri.org/IMoexData/AddClaimsResponse")]
        System.IAsyncResult BeginAddClaims(SpeculatorModel.MoexHistory.MoexClaim[] claims, System.AsyncCallback callback, object asyncState);
        
        void EndAddClaims(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMoexData/AddTrades", ReplyAction="http://tempuri.org/IMoexData/AddTradesResponse")]
        void AddTrades(SpeculatorModel.MoexHistory.MoexTrade[] trades);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoexData/AddTrades", ReplyAction="http://tempuri.org/IMoexData/AddTradesResponse")]
        System.IAsyncResult BeginAddTrades(SpeculatorModel.MoexHistory.MoexTrade[] trades, System.AsyncCallback callback, object asyncState);
        
        void EndAddTrades(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMoexData/Systems", ReplyAction="http://tempuri.org/IMoexData/SystemsResponse")]
        SpeculatorModel.MoexHistory.MoexSystem[] Systems();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoexData/Systems", ReplyAction="http://tempuri.org/IMoexData/SystemsResponse")]
        System.IAsyncResult BeginSystems(System.AsyncCallback callback, object asyncState);
        
        SpeculatorModel.MoexHistory.MoexSystem[] EndSystems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMoexData/Symbols", ReplyAction="http://tempuri.org/IMoexData/SymbolsResponse")]
        SpeculatorModel.MoexHistory.MoexSymbol[] Symbols();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoexData/Symbols", ReplyAction="http://tempuri.org/IMoexData/SymbolsResponse")]
        System.IAsyncResult BeginSymbols(System.AsyncCallback callback, object asyncState);
        
        SpeculatorModel.MoexHistory.MoexSymbol[] EndSymbols(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMoexDataChannel : Speculator.MoexData.IMoexData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SpeculatorModel.MoexHistory.MoexSystem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SpeculatorModel.MoexHistory.MoexSystem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSymbolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSymbolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SpeculatorModel.MoexHistory.MoexSymbol Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SpeculatorModel.MoexHistory.MoexSymbol)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SystemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SystemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SpeculatorModel.MoexHistory.MoexSystem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SpeculatorModel.MoexHistory.MoexSystem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SymbolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SymbolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SpeculatorModel.MoexHistory.MoexSymbol[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SpeculatorModel.MoexHistory.MoexSymbol[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoexDataClient : System.ServiceModel.ClientBase<Speculator.MoexData.IMoexData>, Speculator.MoexData.IMoexData {
        
        private BeginOperationDelegate onBeginAddSystemDelegate;
        
        private EndOperationDelegate onEndAddSystemDelegate;
        
        private System.Threading.SendOrPostCallback onAddSystemCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSymbolDelegate;
        
        private EndOperationDelegate onEndAddSymbolDelegate;
        
        private System.Threading.SendOrPostCallback onAddSymbolCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddClaimsDelegate;
        
        private EndOperationDelegate onEndAddClaimsDelegate;
        
        private System.Threading.SendOrPostCallback onAddClaimsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTradesDelegate;
        
        private EndOperationDelegate onEndAddTradesDelegate;
        
        private System.Threading.SendOrPostCallback onAddTradesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystemsDelegate;
        
        private EndOperationDelegate onEndSystemsDelegate;
        
        private System.Threading.SendOrPostCallback onSystemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSymbolsDelegate;
        
        private EndOperationDelegate onEndSymbolsDelegate;
        
        private System.Threading.SendOrPostCallback onSymbolsCompletedDelegate;
        
        public MoexDataClient() {
        }
        
        public MoexDataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MoexDataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MoexDataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MoexDataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddSystemCompletedEventArgs> AddSystemCompleted;
        
        public event System.EventHandler<AddSymbolCompletedEventArgs> AddSymbolCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddClaimsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddTradesCompleted;
        
        public event System.EventHandler<SystemsCompletedEventArgs> SystemsCompleted;
        
        public event System.EventHandler<SymbolsCompletedEventArgs> SymbolsCompleted;
        
        public SpeculatorModel.MoexHistory.MoexSystem AddSystem(SpeculatorModel.MoexHistory.MoexSystem system) {
            return base.Channel.AddSystem(system);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSystem(SpeculatorModel.MoexHistory.MoexSystem system, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSystem(system, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SpeculatorModel.MoexHistory.MoexSystem EndAddSystem(System.IAsyncResult result) {
            return base.Channel.EndAddSystem(result);
        }
        
        private System.IAsyncResult OnBeginAddSystem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SpeculatorModel.MoexHistory.MoexSystem system = ((SpeculatorModel.MoexHistory.MoexSystem)(inValues[0]));
            return this.BeginAddSystem(system, callback, asyncState);
        }
        
        private object[] OnEndAddSystem(System.IAsyncResult result) {
            SpeculatorModel.MoexHistory.MoexSystem retVal = this.EndAddSystem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSystemCompleted(object state) {
            if ((this.AddSystemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSystemCompleted(this, new AddSystemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSystemAsync(SpeculatorModel.MoexHistory.MoexSystem system) {
            this.AddSystemAsync(system, null);
        }
        
        public void AddSystemAsync(SpeculatorModel.MoexHistory.MoexSystem system, object userState) {
            if ((this.onBeginAddSystemDelegate == null)) {
                this.onBeginAddSystemDelegate = new BeginOperationDelegate(this.OnBeginAddSystem);
            }
            if ((this.onEndAddSystemDelegate == null)) {
                this.onEndAddSystemDelegate = new EndOperationDelegate(this.OnEndAddSystem);
            }
            if ((this.onAddSystemCompletedDelegate == null)) {
                this.onAddSystemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSystemCompleted);
            }
            base.InvokeAsync(this.onBeginAddSystemDelegate, new object[] {
                        system}, this.onEndAddSystemDelegate, this.onAddSystemCompletedDelegate, userState);
        }
        
        public SpeculatorModel.MoexHistory.MoexSymbol AddSymbol(SpeculatorModel.MoexHistory.MoexSymbol symbol) {
            return base.Channel.AddSymbol(symbol);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSymbol(SpeculatorModel.MoexHistory.MoexSymbol symbol, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSymbol(symbol, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SpeculatorModel.MoexHistory.MoexSymbol EndAddSymbol(System.IAsyncResult result) {
            return base.Channel.EndAddSymbol(result);
        }
        
        private System.IAsyncResult OnBeginAddSymbol(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SpeculatorModel.MoexHistory.MoexSymbol symbol = ((SpeculatorModel.MoexHistory.MoexSymbol)(inValues[0]));
            return this.BeginAddSymbol(symbol, callback, asyncState);
        }
        
        private object[] OnEndAddSymbol(System.IAsyncResult result) {
            SpeculatorModel.MoexHistory.MoexSymbol retVal = this.EndAddSymbol(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSymbolCompleted(object state) {
            if ((this.AddSymbolCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSymbolCompleted(this, new AddSymbolCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSymbolAsync(SpeculatorModel.MoexHistory.MoexSymbol symbol) {
            this.AddSymbolAsync(symbol, null);
        }
        
        public void AddSymbolAsync(SpeculatorModel.MoexHistory.MoexSymbol symbol, object userState) {
            if ((this.onBeginAddSymbolDelegate == null)) {
                this.onBeginAddSymbolDelegate = new BeginOperationDelegate(this.OnBeginAddSymbol);
            }
            if ((this.onEndAddSymbolDelegate == null)) {
                this.onEndAddSymbolDelegate = new EndOperationDelegate(this.OnEndAddSymbol);
            }
            if ((this.onAddSymbolCompletedDelegate == null)) {
                this.onAddSymbolCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSymbolCompleted);
            }
            base.InvokeAsync(this.onBeginAddSymbolDelegate, new object[] {
                        symbol}, this.onEndAddSymbolDelegate, this.onAddSymbolCompletedDelegate, userState);
        }
        
        public void AddClaims(SpeculatorModel.MoexHistory.MoexClaim[] claims) {
            base.Channel.AddClaims(claims);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddClaims(SpeculatorModel.MoexHistory.MoexClaim[] claims, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddClaims(claims, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddClaims(System.IAsyncResult result) {
            base.Channel.EndAddClaims(result);
        }
        
        private System.IAsyncResult OnBeginAddClaims(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SpeculatorModel.MoexHistory.MoexClaim[] claims = ((SpeculatorModel.MoexHistory.MoexClaim[])(inValues[0]));
            return this.BeginAddClaims(claims, callback, asyncState);
        }
        
        private object[] OnEndAddClaims(System.IAsyncResult result) {
            this.EndAddClaims(result);
            return null;
        }
        
        private void OnAddClaimsCompleted(object state) {
            if ((this.AddClaimsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddClaimsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddClaimsAsync(SpeculatorModel.MoexHistory.MoexClaim[] claims) {
            this.AddClaimsAsync(claims, null);
        }
        
        public void AddClaimsAsync(SpeculatorModel.MoexHistory.MoexClaim[] claims, object userState) {
            if ((this.onBeginAddClaimsDelegate == null)) {
                this.onBeginAddClaimsDelegate = new BeginOperationDelegate(this.OnBeginAddClaims);
            }
            if ((this.onEndAddClaimsDelegate == null)) {
                this.onEndAddClaimsDelegate = new EndOperationDelegate(this.OnEndAddClaims);
            }
            if ((this.onAddClaimsCompletedDelegate == null)) {
                this.onAddClaimsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddClaimsCompleted);
            }
            base.InvokeAsync(this.onBeginAddClaimsDelegate, new object[] {
                        claims}, this.onEndAddClaimsDelegate, this.onAddClaimsCompletedDelegate, userState);
        }
        
        public void AddTrades(SpeculatorModel.MoexHistory.MoexTrade[] trades) {
            base.Channel.AddTrades(trades);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTrades(SpeculatorModel.MoexHistory.MoexTrade[] trades, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTrades(trades, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddTrades(System.IAsyncResult result) {
            base.Channel.EndAddTrades(result);
        }
        
        private System.IAsyncResult OnBeginAddTrades(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SpeculatorModel.MoexHistory.MoexTrade[] trades = ((SpeculatorModel.MoexHistory.MoexTrade[])(inValues[0]));
            return this.BeginAddTrades(trades, callback, asyncState);
        }
        
        private object[] OnEndAddTrades(System.IAsyncResult result) {
            this.EndAddTrades(result);
            return null;
        }
        
        private void OnAddTradesCompleted(object state) {
            if ((this.AddTradesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTradesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTradesAsync(SpeculatorModel.MoexHistory.MoexTrade[] trades) {
            this.AddTradesAsync(trades, null);
        }
        
        public void AddTradesAsync(SpeculatorModel.MoexHistory.MoexTrade[] trades, object userState) {
            if ((this.onBeginAddTradesDelegate == null)) {
                this.onBeginAddTradesDelegate = new BeginOperationDelegate(this.OnBeginAddTrades);
            }
            if ((this.onEndAddTradesDelegate == null)) {
                this.onEndAddTradesDelegate = new EndOperationDelegate(this.OnEndAddTrades);
            }
            if ((this.onAddTradesCompletedDelegate == null)) {
                this.onAddTradesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTradesCompleted);
            }
            base.InvokeAsync(this.onBeginAddTradesDelegate, new object[] {
                        trades}, this.onEndAddTradesDelegate, this.onAddTradesCompletedDelegate, userState);
        }
        
        public SpeculatorModel.MoexHistory.MoexSystem[] Systems() {
            return base.Channel.Systems();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystems(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystems(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SpeculatorModel.MoexHistory.MoexSystem[] EndSystems(System.IAsyncResult result) {
            return base.Channel.EndSystems(result);
        }
        
        private System.IAsyncResult OnBeginSystems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystems(callback, asyncState);
        }
        
        private object[] OnEndSystems(System.IAsyncResult result) {
            SpeculatorModel.MoexHistory.MoexSystem[] retVal = this.EndSystems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystemsCompleted(object state) {
            if ((this.SystemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SystemsCompleted(this, new SystemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SystemsAsync() {
            this.SystemsAsync(null);
        }
        
        public void SystemsAsync(object userState) {
            if ((this.onBeginSystemsDelegate == null)) {
                this.onBeginSystemsDelegate = new BeginOperationDelegate(this.OnBeginSystems);
            }
            if ((this.onEndSystemsDelegate == null)) {
                this.onEndSystemsDelegate = new EndOperationDelegate(this.OnEndSystems);
            }
            if ((this.onSystemsCompletedDelegate == null)) {
                this.onSystemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystemsCompleted);
            }
            base.InvokeAsync(this.onBeginSystemsDelegate, null, this.onEndSystemsDelegate, this.onSystemsCompletedDelegate, userState);
        }
        
        public SpeculatorModel.MoexHistory.MoexSymbol[] Symbols() {
            return base.Channel.Symbols();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSymbols(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSymbols(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public SpeculatorModel.MoexHistory.MoexSymbol[] EndSymbols(System.IAsyncResult result) {
            return base.Channel.EndSymbols(result);
        }
        
        private System.IAsyncResult OnBeginSymbols(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSymbols(callback, asyncState);
        }
        
        private object[] OnEndSymbols(System.IAsyncResult result) {
            SpeculatorModel.MoexHistory.MoexSymbol[] retVal = this.EndSymbols(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSymbolsCompleted(object state) {
            if ((this.SymbolsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SymbolsCompleted(this, new SymbolsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SymbolsAsync() {
            this.SymbolsAsync(null);
        }
        
        public void SymbolsAsync(object userState) {
            if ((this.onBeginSymbolsDelegate == null)) {
                this.onBeginSymbolsDelegate = new BeginOperationDelegate(this.OnBeginSymbols);
            }
            if ((this.onEndSymbolsDelegate == null)) {
                this.onEndSymbolsDelegate = new EndOperationDelegate(this.OnEndSymbols);
            }
            if ((this.onSymbolsCompletedDelegate == null)) {
                this.onSymbolsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSymbolsCompleted);
            }
            base.InvokeAsync(this.onBeginSymbolsDelegate, null, this.onEndSymbolsDelegate, this.onSymbolsCompletedDelegate, userState);
        }
    }
}
